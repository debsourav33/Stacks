{"ast":null,"code":"import axios from \"axios\";\nimport AuthenticationService from \"../../components/shared/AuthenticationService\";\nexport default class HeapOverFlowService {\n  constructor() {\n    return HeapOverFlowService.instance;\n  }\n\n  getBasicAuthenticationToken(username, password) {\n    return \"Basic \" + window.btoa(username + ':' + password);\n  } //For login, we don't setup axios interactor. So, manually send the auth header.\n\n\n  authenticate(username, password) {\n    let token = this.getBasicAuthenticationToken(username, password);\n    console.log(\"Trying to authenticate using username: \" + username + \", pass: \" + password + \", token: \" + token);\n    return [axios.get(HeapOverFlowService.baseUrl + \"/basicauth\", {\n      headers: {\n        authorization: token\n      }\n    }), () => {\n      this.setupAxiosInterceptor(username, password);\n    }];\n  }\n\n  setupAxiosInterceptor(username, password) {\n    let basicAuthHeader = this.getBasicAuthenticationToken(username, password);\n    axios.interceptors.request.use(config => {\n      if (AuthenticationService.isLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n        console.log(\"Basic Auth Set: \" + basicAuthHeader);\n      }\n\n      return config;\n    }, null, {\n      synchronous: true\n    });\n  }\n\n  retrieveAllQuestions() {\n    return axios.get(HeapOverFlowService.questionUrl);\n  }\n\n  deleteQuestion(id) {\n    let user = AuthenticationService.getLoggedInUserName();\n    let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions/\" + id;\n    console.log(`Hitting: ${url}`);\n    return axios.delete(url);\n  }\n\n  postQuestion(question) {\n    let user = AuthenticationService.getLoggedInUserName();\n    let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions\";\n    console.log(`Hitting: ${url}`);\n    return axios.post(url, question);\n  }\n\n}\nHeapOverFlowService.baseUrl = \"http://localhost:8080\";\nHeapOverFlowService.questionUrl = HeapOverFlowService.baseUrl + \"/questions\";\nHeapOverFlowService.authenticationUserName = \"heaps\";\nHeapOverFlowService.authenticationPassword = \"go123\";\nHeapOverFlowService.instance = new AuthenticationService();","map":{"version":3,"sources":["C:/Users/sourav.deb/Stacks/my-app/src/api/heapoverflow/HeapOverFlowService.js"],"names":["axios","AuthenticationService","HeapOverFlowService","constructor","instance","getBasicAuthenticationToken","username","password","window","btoa","authenticate","token","console","log","get","baseUrl","headers","authorization","setupAxiosInterceptor","basicAuthHeader","interceptors","request","use","config","isLoggedIn","synchronous","retrieveAllQuestions","questionUrl","deleteQuestion","id","user","getLoggedInUserName","url","delete","postQuestion","question","post","authenticationUserName","authenticationPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,+CAAlC;AAEA,eAAe,MAAMC,mBAAN,CAAyB;AAOpCC,EAAAA,WAAW,GAAE;AACT,WAAOD,mBAAmB,CAACE,QAA3B;AACH;;AAEDC,EAAAA,2BAA2B,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAC3C,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GAbmC,CAepC;;;AACAG,EAAAA,YAAY,CAACJ,QAAD,EAAWC,QAAX,EAAoB;AAC5B,QAAII,KAAK,GAAG,KAAKN,2BAAL,CAAiCC,QAAjC,EAA2CC,QAA3C,CAAZ;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4CP,QAA5C,GAAsD,UAAtD,GAAmEC,QAAnE,GAA6E,WAA7E,GAAyFI,KAArG;AACA,WAAO,CACHX,KAAK,CAACc,GAAN,CAAUZ,mBAAmB,CAACa,OAApB,GAA4B,YAAtC,EACA;AACIC,MAAAA,OAAO,EAAG;AAACC,QAAAA,aAAa,EAAGN;AAAjB;AADd,KADA,CADG,EAKH,MAAM;AAAC,WAAKO,qBAAL,CAA2BZ,QAA3B,EAAoCC,QAApC;AAA8C,KALlD,CAAP;AAQH;;AAEDW,EAAAA,qBAAqB,CAACZ,QAAD,EAAWC,QAAX,EAAoB;AACrC,QAAIY,eAAe,GAAG,KAAKd,2BAAL,CAAiCC,QAAjC,EAA2CC,QAA3C,CAAtB;AACAP,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAGtB,qBAAqB,CAACuB,UAAtB,EAAH,EAAsC;AAClCD,QAAAA,MAAM,CAACP,OAAP,CAAeC,aAAf,GAA+BE,eAA/B;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBM,eAAhC;AACH;;AAED,aAAOI,MAAP;AACH,KARL,EAQO,IARP,EAQa;AAAEE,MAAAA,WAAW,EAAE;AAAf,KARb;AAUH;;AAEDC,EAAAA,oBAAoB,GAAE;AAClB,WAAO1B,KAAK,CAACc,GAAN,CAAUZ,mBAAmB,CAACyB,WAA9B,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,EAAD,EAAI;AACd,QAAIC,IAAI,GAAG7B,qBAAqB,CAAC8B,mBAAtB,EAAX;AACA,QAAIC,GAAG,GAAG9B,mBAAmB,CAACa,OAApB,GAA8B,GAA9B,GAAoCe,IAApC,GAA2C,aAA3C,GAA0DD,EAApE;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWmB,GAAI,EAA5B;AACA,WAAOhC,KAAK,CAACiC,MAAN,CAAaD,GAAb,CAAP;AACH;;AAEDE,EAAAA,YAAY,CAACC,QAAD,EAAU;AAClB,QAAIL,IAAI,GAAG7B,qBAAqB,CAAC8B,mBAAtB,EAAX;AACA,QAAIC,GAAG,GAAG9B,mBAAmB,CAACa,OAApB,GAA8B,GAA9B,GAAoCe,IAApC,GAA2C,YAArD;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWmB,GAAI,EAA5B;AACA,WAAOhC,KAAK,CAACoC,IAAN,CAAWJ,GAAX,EAAeG,QAAf,CAAP;AACH;;AA3DmC;AAAnBjC,mB,CACVa,O,GAAU,uB;AADAb,mB,CAEVyB,W,GAAczB,mBAAmB,CAACa,OAApB,GAA8B,Y;AAFlCb,mB,CAGVmC,sB,GAAyB,O;AAHfnC,mB,CAIVoC,sB,GAAyB,O;AAJfpC,mB,CAKVE,Q,GAAW,IAAIH,qBAAJ,E","sourcesContent":["import axios from \"axios\"\r\nimport AuthenticationService from \"../../components/shared/AuthenticationService\";\r\n\r\nexport default class HeapOverFlowService{\r\n    static baseUrl = \"http://localhost:8080\"\r\n    static questionUrl = HeapOverFlowService.baseUrl + \"/questions\"\r\n    static authenticationUserName = \"heaps\";\r\n    static authenticationPassword = \"go123\";\r\n    static instance = new AuthenticationService();\r\n\r\n    constructor(){\r\n        return HeapOverFlowService.instance;\r\n    }\r\n\r\n    getBasicAuthenticationToken(username, password){\r\n        return \"Basic \" + window.btoa(username + ':' + password);\r\n    }\r\n\r\n    //For login, we don't setup axios interactor. So, manually send the auth header.\r\n    authenticate(username, password){\r\n        let token = this.getBasicAuthenticationToken(username, password)\r\n        console.log(\"Trying to authenticate using username: \" + username +\", pass: \" + password +\", token: \"+token);\r\n        return [\r\n            axios.get(HeapOverFlowService.baseUrl+\"/basicauth\",\r\n            {\r\n                headers : {authorization : token}\r\n            }),\r\n            () => {this.setupAxiosInterceptor(username,password)}\r\n        ]\r\n        ;\r\n    }\r\n\r\n    setupAxiosInterceptor(username, password){\r\n        let basicAuthHeader = this.getBasicAuthenticationToken(username, password);\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(AuthenticationService.isLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader;\r\n                    console.log(\"Basic Auth Set: \"+ basicAuthHeader);\r\n                }\r\n                \r\n                return config;\r\n            }, null, { synchronous: true }\r\n        );\r\n    }\r\n\r\n    retrieveAllQuestions(){\r\n        return axios.get(HeapOverFlowService.questionUrl);\r\n    }\r\n\r\n    deleteQuestion(id){\r\n        let user = AuthenticationService.getLoggedInUserName();\r\n        let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions/\"+ id;\r\n        console.log(`Hitting: ${url}`);\r\n        return axios.delete(url);\r\n    }\r\n\r\n    postQuestion(question){\r\n        let user = AuthenticationService.getLoggedInUserName();\r\n        let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions\";\r\n        console.log(`Hitting: ${url}`);\r\n        return axios.post(url,question);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}