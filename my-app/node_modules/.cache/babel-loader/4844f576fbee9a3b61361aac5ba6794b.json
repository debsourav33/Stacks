{"ast":null,"code":"class Animal {\n  constructor() {\n    this.BroadName = \"Scary Animal\";\n    this.alive = true;\n  }\n\n  eat() {\n    console.log(`${this.BroadName} is eating`);\n  }\n\n}\n\nclass Tiger extends Animal {\n  constructor() {\n    super(...arguments);\n    this.genreName = \"Tiger\";\n  }\n\n  eat() {\n    let self = this;\n    let eatingHabit = \"meat\";\n    console.log(`A ${this.BroadName} named ${this.genreName} is eating`);\n\n    function sound() {\n      function yums() {\n        console.log(`${self.genreName} eating ${eatingHabit} yum yum`);\n      }\n\n      function yakk() {\n        console.log(`${self.genreName} eating ${eatingHabit} yaak`);\n      }\n\n      yums();\n    }\n\n    sound();\n  }\n\n  changeName(name) {\n    this.genreName = name;\n  }\n\n}\n\nexport default class Main {\n  constructor() {\n    this.name = \"main\";\n\n    this.fun = function () {\n      let box = \"square\";\n\n      let ins = function () {\n        console.log(this.box);\n      }; //ins() //this = undefined\n\n\n      console.log(this);\n      ins.bind(this)(); //this = main instance\n    };\n  }\n\n  constructorFuncExp() {\n    function Car() {}\n\n    let car1 = new Car();\n    let car2 = new Car();\n    console.log(car1.color); // undefined\n\n    Car.prototype.color = 'original color';\n    console.log(car1.color); // 'original color'\n\n    console.log(car1);\n    car1.color = 'black';\n    console.log(car1.color); // 'black'\n\n    console.log(Object.getPrototypeOf(car1).color); // 'original color'\n\n    console.log(Object.getPrototypeOf(car2).color); // 'original color'\n\n    console.log(car1.color); // 'black'\n\n    console.log(car2.color); // 'original color'\n  }\n\n  run() {\n    //this.fun();\n    //let ins = new this.fun();\n    //ins();\n    this.constructorFuncExp();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/sourav.deb/Stacks/my-app/src/js_module/Main.js"],"names":["Animal","constructor","BroadName","alive","eat","console","log","Tiger","genreName","self","eatingHabit","sound","yums","yakk","changeName","name","Main","fun","box","ins","bind","constructorFuncExp","Car","car1","car2","color","prototype","Object","getPrototypeOf","run"],"mappings":"AAAA,MAAMA,MAAN,CAAY;AAIRC,EAAAA,WAAW,GAAG;AAAA,SAHdC,SAGc,GAHF,cAGE;AAAA,SAFdC,KAEc,GAFN,IAEM;AACb;;AAEDC,EAAAA,GAAG,GAAE;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAa,GAAE,KAAKJ,SAAU,YAA9B;AACH;;AATO;;AAYZ,MAAMK,KAAN,SAAoBP,MAApB,CAA0B;AAAA;AAAA;AAAA,SACtBQ,SADsB,GACV,OADU;AAAA;;AAGtBJ,EAAAA,GAAG,GAAE;AACD,QAAIK,IAAI,GAAG,IAAX;AACA,QAAIC,WAAW,GAAG,MAAlB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAa,KAAI,KAAKJ,SAAU,UAAS,KAAKM,SAAU,YAAxD;;AAEA,aAASG,KAAT,GAAgB;AACZ,eAASC,IAAT,GAAe;AACXP,QAAAA,OAAO,CAACC,GAAR,CAAa,GAAEG,IAAI,CAACD,SAAU,WAAUE,WAAY,UAApD;AACH;;AAED,eAASG,IAAT,GAAe;AACXR,QAAAA,OAAO,CAACC,GAAR,CAAa,GAAEG,IAAI,CAACD,SAAU,WAAUE,WAAY,OAApD;AACH;;AAEDE,MAAAA,IAAI;AACP;;AAEDD,IAAAA,KAAK;AACR;;AAEDG,EAAAA,UAAU,CAACC,IAAD,EAAM;AACZ,SAAKP,SAAL,GAAiBO,IAAjB;AACH;;AAzBqB;;AA4B1B,eAAe,MAAMC,IAAN,CAAU;AAAA;AAAA,SASrBD,IATqB,GASd,MATc;;AAAA,SAWrBE,GAXqB,GAWf,YAAU;AACZ,UAAIC,GAAG,GAAG,QAAV;;AAEA,UAAIC,GAAG,GAAG,YAAU;AAChBd,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKY,GAAjB;AACH,OAFD,CAHY,CAOZ;;;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAa,MAAAA,GAAG,CAACC,IAAJ,CAAS,IAAT,IATY,CASM;AACrB,KArBoB;AAAA;;AAuBrBC,EAAAA,kBAAkB,GAAE;AAChB,aAASC,GAAT,GAAe,CAAE;;AACjB,QAAIC,IAAI,GAAG,IAAID,GAAJ,EAAX;AACA,QAAIE,IAAI,GAAG,IAAIF,GAAJ,EAAX;AAEAjB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAI,CAACE,KAAjB,EALgB,CAKY;;AAE5BH,IAAAA,GAAG,CAACI,SAAJ,CAAcD,KAAd,GAAsB,gBAAtB;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAI,CAACE,KAAjB,EARgB,CAQY;;AAC5BpB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAZ;AAEAA,IAAAA,IAAI,CAACE,KAAL,GAAa,OAAb;AACApB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAI,CAACE,KAAjB,EAZgB,CAYY;;AAE5BpB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAM,CAACC,cAAP,CAAsBL,IAAtB,EAA4BE,KAAxC,EAdgB,CAcgC;;AAChDpB,IAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAM,CAACC,cAAP,CAAsBJ,IAAtB,EAA4BC,KAAxC,EAfgB,CAegC;;AAChDpB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,IAAI,CAACE,KAAjB,EAhBgB,CAgBW;;AAC3BpB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,IAAI,CAACC,KAAjB,EAjBgB,CAiBW;AAC9B;;AACDI,EAAAA,GAAG,GAAE;AACD;AACA;AACA;AAEA,SAAKR,kBAAL;AAEH;;AAjDoB","sourcesContent":["class Animal{\r\n    BroadName = \"Scary Animal\"\r\n    alive = true;\r\n\r\n    constructor (){\r\n    }\r\n\r\n    eat(){\r\n        console.log(`${this.BroadName} is eating`)\r\n    }\r\n}\r\n\r\nclass Tiger extends Animal{\r\n    genreName = \"Tiger\";\r\n\r\n    eat(){\r\n        let self = this;\r\n        let eatingHabit = \"meat\"\r\n        console.log(`A ${this.BroadName} named ${this.genreName} is eating`);\r\n        \r\n        function sound(){\r\n            function yums(){\r\n                console.log(`${self.genreName} eating ${eatingHabit} yum yum`);\r\n            }\r\n\r\n            function yakk(){\r\n                console.log(`${self.genreName} eating ${eatingHabit} yaak`);\r\n            }\r\n\r\n            yums();\r\n        } \r\n\r\n        sound();\r\n    }\r\n\r\n    changeName(name){\r\n        this.genreName = name;\r\n    }\r\n}\r\n\r\nexport default class Main{\r\n    /*\r\n    const anim = new Tiger();\r\n    console.log(anim);\r\n    anim.eat();\r\n\r\n    anim.changeName(\"Scary Tiger\");\r\n    anim.eat();\r\n    */\r\n    name = \"main\";\r\n\r\n    fun = function(){\r\n        let box = \"square\";\r\n\r\n        let ins = function(){\r\n            console.log(this.box);\r\n        }\r\n\r\n        //ins() //this = undefined\r\n        console.log(this);\r\n        ins.bind(this)(); //this = main instance\r\n    }\r\n    \r\n    constructorFuncExp(){\r\n        function Car() {}\r\n        let car1 = new Car();\r\n        let car2 = new Car();\r\n\r\n        console.log(car1.color);    // undefined\r\n\r\n        Car.prototype.color = 'original color';\r\n        console.log(car1.color);    // 'original color'\r\n        console.log(car1);\r\n\r\n        car1.color = 'black';\r\n        console.log(car1.color);    // 'black'\r\n\r\n        console.log(Object.getPrototypeOf(car1).color); // 'original color'\r\n        console.log(Object.getPrototypeOf(car2).color); // 'original color'\r\n        console.log(car1.color);   // 'black'\r\n        console.log(car2.color);   // 'original color'\r\n    }\r\n    run(){\r\n        //this.fun();\r\n        //let ins = new this.fun();\r\n        //ins();\r\n\r\n        this.constructorFuncExp();\r\n        \r\n    }\r\n    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}