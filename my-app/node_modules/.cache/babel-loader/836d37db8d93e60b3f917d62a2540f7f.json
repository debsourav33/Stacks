{"ast":null,"code":"import axios from \"axios\";\nimport AuthenticationService from \"../../components/shared/AuthenticationService\";\nexport default class HeapOverFlowService {\n  constructor() {\n    this.interceptorInitialized = false;\n\n    if (AuthenticationService.isLoggedIn() && !this.interceptorInitialized) {\n      this.setupAxiosInterceptor(AuthenticationService.getLoggedInUserName, HeapOverFlowService.authenticationPassword);\n    }\n  }\n\n  getBasicAuthenticationToken(username, password) {\n    return \"Basic \" + window.btoa(username + ':' + password);\n  } //For login, we don't setup axios interactor. So, manually send the auth header.\n\n\n  authenticate(username, password) {\n    return axios.get(HeapOverFlowService.baseUrl + \"/basicauth\", {\n      headers: {\n        authorization: this.getBasicAuthenticationToken(username, password)\n      }\n    });\n  }\n\n  setupAxiosInterceptor(username, password) {\n    let basicAuthHeader = this.getBasicAuthenticationToken(username, password);\n    axios.interceptors.request.use(config => {\n      if (AuthenticationService.isLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n        this.interceptorInitialized = true;\n        console.log(\"Basic Auth Set: \" + basicAuthHeader);\n      }\n\n      return config;\n    }, null, {\n      synchronous: true\n    });\n  }\n\n  retrieveAllQuestions() {\n    return axios.get(HeapOverFlowService.questionUrl);\n  }\n\n  deleteQuestion(id) {\n    let user = AuthenticationService.getLoggedInUserName();\n    let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions/\" + id;\n    console.log(`Hitting: ${url}`);\n    return axios.delete(url);\n  }\n\n  postQuestion(question) {\n    let user = AuthenticationService.getLoggedInUserName();\n    let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions\";\n    console.log(`Hitting: ${url}`);\n    return axios.post(url, question);\n  }\n\n}\nHeapOverFlowService.baseUrl = \"http://localhost:8080\";\nHeapOverFlowService.questionUrl = HeapOverFlowService.baseUrl + \"/questions\";\nHeapOverFlowService.authenticationUserName = \"heaps\";\nHeapOverFlowService.authenticationPassword = \"go123\";","map":{"version":3,"sources":["C:/Users/sourav.deb/Stacks/my-app/src/api/heapoverflow/HeapOverFlowService.js"],"names":["axios","AuthenticationService","HeapOverFlowService","constructor","interceptorInitialized","isLoggedIn","setupAxiosInterceptor","getLoggedInUserName","authenticationPassword","getBasicAuthenticationToken","username","password","window","btoa","authenticate","get","baseUrl","headers","authorization","basicAuthHeader","interceptors","request","use","config","console","log","synchronous","retrieveAllQuestions","questionUrl","deleteQuestion","id","user","url","delete","postQuestion","question","post","authenticationUserName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,+CAAlC;AAEA,eAAe,MAAMC,mBAAN,CAAyB;AAQpCC,EAAAA,WAAW,GAAE;AAAA,SAFbC,sBAEa,GAFY,KAEZ;;AACT,QAAGH,qBAAqB,CAACI,UAAtB,MAAsC,CAAC,KAAKD,sBAA/C,EAAsE;AAClE,WAAKE,qBAAL,CAA2BL,qBAAqB,CAACM,mBAAjD,EAAsEL,mBAAmB,CAACM,sBAA1F;AACH;AACJ;;AAEDC,EAAAA,2BAA2B,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAC3C,WAAO,WAAWC,MAAM,CAACC,IAAP,CAAYH,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH,GAhBmC,CAkBpC;;;AACAG,EAAAA,YAAY,CAACJ,QAAD,EAAWC,QAAX,EAAoB;AAC5B,WAAOX,KAAK,CAACe,GAAN,CAAUb,mBAAmB,CAACc,OAApB,GAA4B,YAAtC,EACP;AACIC,MAAAA,OAAO,EAAG;AAACC,QAAAA,aAAa,EAAG,KAAKT,2BAAL,CAAiCC,QAAjC,EAA2CC,QAA3C;AAAjB;AADd,KADO,CAAP;AAIH;;AAEDL,EAAAA,qBAAqB,CAACI,QAAD,EAAWC,QAAX,EAAoB;AACrC,QAAIQ,eAAe,GAAG,KAAKV,2BAAL,CAAiCC,QAAjC,EAA2CC,QAA3C,CAAtB;AACAX,IAAAA,KAAK,CAACoB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAGtB,qBAAqB,CAACI,UAAtB,EAAH,EAAsC;AAClCkB,QAAAA,MAAM,CAACN,OAAP,CAAeC,aAAf,GAA+BC,eAA/B;AACA,aAAKf,sBAAL,GAA8B,IAA9B;AACAoB,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBN,eAAhC;AACH;;AAED,aAAOI,MAAP;AACH,KATL,EASO,IATP,EASa;AAAEG,MAAAA,WAAW,EAAE;AAAf,KATb;AAWH;;AAEDC,EAAAA,oBAAoB,GAAE;AAClB,WAAO3B,KAAK,CAACe,GAAN,CAAUb,mBAAmB,CAAC0B,WAA9B,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,EAAD,EAAI;AACd,QAAIC,IAAI,GAAG9B,qBAAqB,CAACM,mBAAtB,EAAX;AACA,QAAIyB,GAAG,GAAG9B,mBAAmB,CAACc,OAApB,GAA8B,GAA9B,GAAoCe,IAApC,GAA2C,aAA3C,GAA0DD,EAApE;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWO,GAAI,EAA5B;AACA,WAAOhC,KAAK,CAACiC,MAAN,CAAaD,GAAb,CAAP;AACH;;AAEDE,EAAAA,YAAY,CAACC,QAAD,EAAU;AAClB,QAAIJ,IAAI,GAAG9B,qBAAqB,CAACM,mBAAtB,EAAX;AACA,QAAIyB,GAAG,GAAG9B,mBAAmB,CAACc,OAApB,GAA8B,GAA9B,GAAoCe,IAApC,GAA2C,YAArD;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWO,GAAI,EAA5B;AACA,WAAOhC,KAAK,CAACoC,IAAN,CAAWJ,GAAX,EAAeG,QAAf,CAAP;AACH;;AAzDmC;AAAnBjC,mB,CACVc,O,GAAU,uB;AADAd,mB,CAEV0B,W,GAAc1B,mBAAmB,CAACc,OAApB,GAA8B,Y;AAFlCd,mB,CAGVmC,sB,GAAyB,O;AAHfnC,mB,CAIVM,sB,GAAyB,O","sourcesContent":["import axios from \"axios\"\r\nimport AuthenticationService from \"../../components/shared/AuthenticationService\";\r\n\r\nexport default class HeapOverFlowService{\r\n    static baseUrl = \"http://localhost:8080\"\r\n    static questionUrl = HeapOverFlowService.baseUrl + \"/questions\"\r\n    static authenticationUserName = \"heaps\";\r\n    static authenticationPassword = \"go123\";\r\n\r\n    interceptorInitialized = false;\r\n\r\n    constructor(){\r\n        if(AuthenticationService.isLoggedIn() && !this.interceptorInitialized){\r\n            this.setupAxiosInterceptor(AuthenticationService.getLoggedInUserName, HeapOverFlowService.authenticationPassword);\r\n        }\r\n    }\r\n\r\n    getBasicAuthenticationToken(username, password){\r\n        return \"Basic \" + window.btoa(username + ':' + password);\r\n    }\r\n\r\n    //For login, we don't setup axios interactor. So, manually send the auth header.\r\n    authenticate(username, password){\r\n        return axios.get(HeapOverFlowService.baseUrl+\"/basicauth\",\r\n        {\r\n            headers : {authorization : this.getBasicAuthenticationToken(username, password)}\r\n        });\r\n    }\r\n\r\n    setupAxiosInterceptor(username, password){\r\n        let basicAuthHeader = this.getBasicAuthenticationToken(username, password);\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if(AuthenticationService.isLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader;\r\n                    this.interceptorInitialized = true;\r\n                    console.log(\"Basic Auth Set: \"+ basicAuthHeader);\r\n                }\r\n                \r\n                return config;\r\n            }, null, { synchronous: true }\r\n        );\r\n    }\r\n\r\n    retrieveAllQuestions(){\r\n        return axios.get(HeapOverFlowService.questionUrl);\r\n    }\r\n\r\n    deleteQuestion(id){\r\n        let user = AuthenticationService.getLoggedInUserName();\r\n        let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions/\"+ id;\r\n        console.log(`Hitting: ${url}`);\r\n        return axios.delete(url);\r\n    }\r\n\r\n    postQuestion(question){\r\n        let user = AuthenticationService.getLoggedInUserName();\r\n        let url = HeapOverFlowService.baseUrl + \"/\" + user + \"/questions\";\r\n        console.log(`Hitting: ${url}`);\r\n        return axios.post(url,question);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}