{"ast":null,"code":"import axios from \"axios\";\nimport AuthenticationService from \"../../components/shared/AuthenticationService\";\nexport default class HeapOverFlowService {\n  //+ \"/jpa\"\n  constructor() {\n    if (HeapOverFlowService._instance) {\n      console.log(\"Returning cached instance\");\n      return HeapOverFlowService._instance;\n    }\n\n    console.log(\"Returning new instance\");\n    this.setupAxiosInterceptor();\n    HeapOverFlowService._instance = this;\n  } //For login, we don't setup axios interactor. So, manually send the auth header.\n\n\n  authenticate(username, password) {\n    let token = AuthenticationService.getBasicAuthenticationToken(username, password);\n    console.log(\"Trying to authenticate using username: \" + username + \", pass: \" + password + \", token: \" + token);\n    return [axios.get(HeapOverFlowService.baseUrl + \"/basicauth\", {\n      headers: {\n        authorization: token\n      }\n    }), () => {\n      this.setupAxiosInterceptor();\n    }];\n  }\n\n  setupAxiosInterceptor() {\n    if (!AuthenticationService.isLoggedIn()) return;\n    axios.interceptors.request.use(config => {\n      let basicAuthHeader = AuthenticationService.getRegisteredBasicAuthenticationToken();\n      config.headers.authorization = basicAuthHeader;\n      console.log(\"Basic Auth Set: \" + basicAuthHeader);\n      return config;\n    }, null, {\n      synchronous: true\n    });\n  }\n\n  retrieveAllQuestions() {\n    return axios.get(HeapOverFlowService.questionJpaUrl);\n  }\n\n  deleteQuestion(id) {\n    let url = HeapOverFlowService.baseJpaUrl + \"/questions/\" + id;\n    console.log(`Hitting: ${url}`);\n    return axios.delete(url);\n  }\n\n  postQuestion(question) {\n    let user = AuthenticationService.getLoggedInUserName();\n    let url = HeapOverFlowService.baseJpaUrl + \"/\" + user + \"/questions\";\n    console.log(`Hitting: ${url}`);\n    return axios.post(url, question);\n  }\n\n}\nHeapOverFlowService.baseUrl = \"http://localhost:8080\";\nHeapOverFlowService.baseJpaUrl = HeapOverFlowService.baseUrl;\nHeapOverFlowService.questionJpaUrl = HeapOverFlowService.baseUrl + \"/questions\";\nHeapOverFlowService.authenticationUserName = \"heaps\";\nHeapOverFlowService.authenticationPassword = \"go123\";","map":{"version":3,"sources":["C:/Users/sourav.deb/Stacks/my-app/src/api/heapoverflow/HeapOverFlowService.js"],"names":["axios","AuthenticationService","HeapOverFlowService","constructor","_instance","console","log","setupAxiosInterceptor","authenticate","username","password","token","getBasicAuthenticationToken","get","baseUrl","headers","authorization","isLoggedIn","interceptors","request","use","config","basicAuthHeader","getRegisteredBasicAuthenticationToken","synchronous","retrieveAllQuestions","questionJpaUrl","deleteQuestion","id","url","baseJpaUrl","delete","postQuestion","question","user","getLoggedInUserName","post","authenticationUserName","authenticationPassword"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,+CAAlC;AAEA,eAAe,MAAMC,mBAAN,CAAyB;AAEY;AAKhDC,EAAAA,WAAW,GAAE;AACT,QAAGD,mBAAmB,CAACE,SAAvB,EAAiC;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,aAAOJ,mBAAmB,CAACE,SAA3B;AACH;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AAEA,SAAKC,qBAAL;AACAL,IAAAA,mBAAmB,CAACE,SAApB,GAAgC,IAAhC;AACH,GAjBmC,CAqBpC;;;AACAI,EAAAA,YAAY,CAACC,QAAD,EAAWC,QAAX,EAAoB;AAC5B,QAAIC,KAAK,GAAGV,qBAAqB,CAACW,2BAAtB,CAAkDH,QAAlD,EAA4DC,QAA5D,CAAZ;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4CG,QAA5C,GAAsD,UAAtD,GAAmEC,QAAnE,GAA6E,WAA7E,GAAyFC,KAArG;AACA,WAAO,CACHX,KAAK,CAACa,GAAN,CAAUX,mBAAmB,CAACY,OAApB,GAA4B,YAAtC,EACA;AACIC,MAAAA,OAAO,EAAG;AAACC,QAAAA,aAAa,EAAGL;AAAjB;AADd,KADA,CADG,EAKH,MAAM;AACF,WAAKJ,qBAAL;AACH,KAPE,CAAP;AAUH;;AAEDA,EAAAA,qBAAqB,GAAE;AACnB,QAAG,CAACN,qBAAqB,CAACgB,UAAtB,EAAJ,EAAyC;AACzCjB,IAAAA,KAAK,CAACkB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACKC,MAAD,IAAY;AACR,UAAIC,eAAe,GAAGrB,qBAAqB,CAACsB,qCAAtB,EAAtB;AACAF,MAAAA,MAAM,CAACN,OAAP,CAAeC,aAAf,GAA+BM,eAA/B;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBgB,eAAhC;AAEA,aAAOD,MAAP;AACH,KAPL,EAOO,IAPP,EAOa;AAAEG,MAAAA,WAAW,EAAE;AAAf,KAPb;AASH;;AAEDC,EAAAA,oBAAoB,GAAE;AAClB,WAAOzB,KAAK,CAACa,GAAN,CAAUX,mBAAmB,CAACwB,cAA9B,CAAP;AACH;;AAEDC,EAAAA,cAAc,CAACC,EAAD,EAAI;AACd,QAAIC,GAAG,GAAG3B,mBAAmB,CAAC4B,UAApB,GAAiC,aAAjC,GAAgDF,EAA1D;AACAvB,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWuB,GAAI,EAA5B;AACA,WAAO7B,KAAK,CAAC+B,MAAN,CAAaF,GAAb,CAAP;AACH;;AAEDG,EAAAA,YAAY,CAACC,QAAD,EAAU;AAClB,QAAIC,IAAI,GAAGjC,qBAAqB,CAACkC,mBAAtB,EAAX;AACA,QAAIN,GAAG,GAAG3B,mBAAmB,CAAC4B,UAApB,GAAiC,GAAjC,GAAuCI,IAAvC,GAA8C,YAAxD;AACA7B,IAAAA,OAAO,CAACC,GAAR,CAAa,YAAWuB,GAAI,EAA5B;AACA,WAAO7B,KAAK,CAACoC,IAAN,CAAWP,GAAX,EAAeI,QAAf,CAAP;AACH;;AAjEmC;AAAnB/B,mB,CACVY,O,GAAU,uB;AADAZ,mB,CAEV4B,U,GAAa5B,mBAAmB,CAACY,O;AAFvBZ,mB,CAGVwB,c,GAAiBxB,mBAAmB,CAACY,OAApB,GAA8B,Y;AAHrCZ,mB,CAIVmC,sB,GAAyB,O;AAJfnC,mB,CAKVoC,sB,GAAyB,O","sourcesContent":["import axios from \"axios\"\r\nimport AuthenticationService from \"../../components/shared/AuthenticationService\";\r\n\r\nexport default class HeapOverFlowService{\r\n    static baseUrl = \"http://localhost:8080\"\r\n    static baseJpaUrl = HeapOverFlowService.baseUrl //+ \"/jpa\"\r\n    static questionJpaUrl = HeapOverFlowService.baseUrl + \"/questions\"\r\n    static authenticationUserName = \"heaps\";\r\n    static authenticationPassword = \"go123\";\r\n\r\n    constructor(){\r\n        if(HeapOverFlowService._instance){\r\n            console.log(\"Returning cached instance\");\r\n            return HeapOverFlowService._instance;\r\n        }\r\n\r\n        console.log(\"Returning new instance\");\r\n        \r\n        this.setupAxiosInterceptor();\r\n        HeapOverFlowService._instance = this;\r\n    }\r\n\r\n    \r\n\r\n    //For login, we don't setup axios interactor. So, manually send the auth header.\r\n    authenticate(username, password){\r\n        let token = AuthenticationService.getBasicAuthenticationToken(username, password)\r\n        console.log(\"Trying to authenticate using username: \" + username +\", pass: \" + password +\", token: \"+token);\r\n        return [\r\n            axios.get(HeapOverFlowService.baseUrl+\"/basicauth\",\r\n            {\r\n                headers : {authorization : token}\r\n            }),\r\n            () => {\r\n                this.setupAxiosInterceptor();\r\n            }\r\n        ]\r\n        ;\r\n    }\r\n\r\n    setupAxiosInterceptor(){\r\n        if(!AuthenticationService.isLoggedIn())  return;\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                let basicAuthHeader = AuthenticationService.getRegisteredBasicAuthenticationToken();\r\n                config.headers.authorization = basicAuthHeader;\r\n                console.log(\"Basic Auth Set: \"+ basicAuthHeader);\r\n            \r\n                return config;\r\n            }, null, { synchronous: true }\r\n        );\r\n    }\r\n\r\n    retrieveAllQuestions(){\r\n        return axios.get(HeapOverFlowService.questionJpaUrl);\r\n    }\r\n\r\n    deleteQuestion(id){\r\n        let url = HeapOverFlowService.baseJpaUrl + \"/questions/\"+ id;\r\n        console.log(`Hitting: ${url}`);\r\n        return axios.delete(url);\r\n    }\r\n\r\n    postQuestion(question){\r\n        let user = AuthenticationService.getLoggedInUserName();\r\n        let url = HeapOverFlowService.baseJpaUrl + \"/\" + user + \"/questions\";\r\n        console.log(`Hitting: ${url}`);\r\n        return axios.post(url,question);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}